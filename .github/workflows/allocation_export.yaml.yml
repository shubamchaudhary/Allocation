name: Publish Allocation Data
run-name: Publish Allocation Data for ${{ inputs.realmName }}
on:
  workflow_dispatch:
    inputs:
      realmName:
        type: string
        description: Name of the LIAM Realm
        required: true
      realmId:
        type: string
        description: ID of the LIAM Realm
        required: true
      geography:
        type: string
        description: Environment Deployment Zone(eg. us, eu, apac)
        required: true
      size:
        type: string
        description: Environment Size
        required: true
      jpowerId:
        required: true
        type: string
        description: JPowerID
      customerId:
        required: true
        type: string
        description: Realm Customer ID
      envType:
        required: true
        description: Environment Type
        type: choice
        default: dev
        options:
          - dev
          - interop
          - psr
          - demo
      keyVaultURL:
        required: true
        type: string
        description: Key Vault URL to get Client Credential
        default: "https://allocation-key-vault.vault.azure.net"

  workflow_call:
    inputs:
      realmName:
        type: string
        description: Name of the LIAM Realm to export from
        required: true
      realmId:
        type: string
        description: ID of the LIAM Realm
        required: true
      geography:
        type: string
        description: Environment Deployment Zone
        required: true
      size:
        type: string
        description: Environment Size
        required: true
      jpowerId:
        required: true
        type: string
        description: JPowerID
      customerId:
        required: true
        type: string
        description: Realm Customer ID
      envType:
        required: true
        type: string
        description: Environment Type
      keyVaultURL:
        required: true
        type: string
        description: Key Vault URL to get Client Credential

defaults:
  run:
    shell: pwsh
jobs:
  get_by_env:
    runs-on: ubuntu-latest
    outputs:
      byenv: ${{ steps.get_by_env.outputs.byenv }}
    steps:
      - name: Get BY Env
        id: get_by_env
        uses: actions/github-script@v6
        with:
          script: |
            const geography = "${{ inputs.geography }}";
            const envType = "${{ inputs.envType }}";
            
            let byenv = "";
            if (geography === "us") {
              if (envType === "Dev") byenv = "US-Dev";
              else if (envType === "Non-Prod") byenv = "US-NonProd";
              else if (envType === "Prod") byenv = "US-Prod";
              else byenv = "US-Dev";
            } else if (geography === "eu") {
              if (envType === "Dev") byenv = "EU-Dev";
              else if (envType === "Non-Prod") byenv = "EU-NonProd";
              else if (envType === "Prod") byenv = "EU-Prod";
              else byenv = "EU-Dev";
            } else if (geography === "apac") {
              if (envType === "Dev") byenv = "APAC-Dev";
              else if (envType === "Non-Prod") byenv = "APAC-NonProd";
              else if (envType === "Prod") byenv = "APAC-Prod";
              else byenv = "APAC-Dev";
            } else {
              byenv = "US-Dev";
            }
            
            console.log(`Setting byenv to: ${byenv}`);
            return byenv;
      - name: Echo Output
        id: echo_output
        run: |
          Write-Output ${{ steps.get_by_env.outputs.byenv }}

  Publish_Allocation_Resources:
    runs-on: ubuntu-latest
    needs: get_by_env
    environment: ${{ needs.get_by_env.outputs.byenv }}
    steps:
      - name: Echo Input
        id: echo_input
        run: |
          Write-Output "realmName: [${{ inputs.realmName }}]"
          Write-Output "realmId: [${{ inputs.realmId }}]"
          Write-Output "geography: [${{ inputs.geography }}]"
          Write-Output "envType: [${{ inputs.envType }}]"
          Write-Output "size: [${{ inputs.size }}]"
          Write-Output "jpowerId: [${{ inputs.jpowerId }}]"
          Write-Output "customerId: [${{ inputs.customerId }}]"
          Write-Output "Key Vault Name: [${{ inputs.keyVaultURL }}]"

      - name: Check out repository code
        uses: actions/checkout@v4.1.1

      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Create Realm Credential
        run: |
          # Get client credentials from key vault
          $clientId = az keyvault secret show --vault-name ${{ inputs.keyVaultURL }} --name "CLIENT-ID" --query value -o tsv
          $clientSecret = az keyvault secret show --vault-name ${{ inputs.keyVaultURL }} --name "CLIENT-SECRET" --query value -o tsv
          
          # Create or update credential file for the realm
          $credentialJson = @{
            "realm_name" = "${{ inputs.realmName }}"
            "realm_id" = "${{ inputs.realmId }}"
            "customer_id" = "${{ inputs.customerId }}"
            "jpower_id" = "${{ inputs.jpowerId }}"
            "client_id" = "$clientId"
            "client_secret" = "$clientSecret"
            "geography" = "${{ inputs.geography }}"
            "size" = "${{ inputs.size }}"
            "env_type" = "${{ inputs.envType }}"
          } | ConvertTo-Json
          
          $credentialJson | Out-File -FilePath "${{ inputs.realmName }}.json" -Encoding utf8

      - name: Check out Realm Repository
        uses: actions/checkout@v4.1.1
        with:
          repository: 'BY-Product-Development/plan-calloc-realms'
          token: ${{ secrets.AUTOMATION_PAT_TOKEN }}
          path: 'realms-repo'

      - name: Setup Realm Folder
        id: setup_realm_folder
        run: |
          New-Item -Force -Path "realms-repo/realms/${{ inputs.realmName }}/allocation_export" -Type Directory 
          Copy-Item -Force "${{ inputs.realmName }}.json" -Destination "realms-repo/realms/${{ inputs.realmName }}/realm_info/realm_info.json"

      - name: Export Allocation Data
        run: |
          # Call the API endpoint to export allocation data
          $headers = @{
            "Content-Type" = "application/json"
            "Authorization" = "Bearer $token"  # Replace with your auth mechanism
          }
          
          # Using direct curl command for the download
          curl -L -o "exported-tables.zip" `
            -H "Authorization: Bearer $token" `
            "${{ secrets.SERVICE_BASE_URL }}/api/v1/allocation/export-db-records"
          
          # Unzip to check contents
          Expand-Archive -Path "exported-tables.zip" -DestinationPath "temp-export" -Force
          
          # Copy files to realm repository
          Copy-Item -Force -Recurse "temp-export/*" -Destination "realms-repo/realms/${{ inputs.realmName }}/allocation_export/"
          
          # Clean up
          Remove-Item -Recurse -Force "temp-export"

      - name: Commit and Push Changes
        run: |
          cd realms-repo
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Export allocation data for realm ${{ inputs.realmName }}"
          git push

      - name: Upload Exported Data as Artifact
        uses: actions/upload-artifact@v4.1.0
        with:
          name: allocation-export
          path: exported-tables.zip
          retention-days: 30

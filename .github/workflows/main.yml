name: ALM Allocation Import/Export (Test)
run-name: Allocation Import/Export for ${{ inputs.environment_name }} - ${{ inputs.operation_type }} (Test)
on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: "Specify which environment to use (case insensitive)"
        required: true
        type: string
      operation_type:
        description: "Specify operation type"
        required: true
        type: choice
        options:
          - export
          - import
      planning_instance_id:
        description: "Planning Instance ID (required for import)"
        required: false
        type: string
      source_environment:
        description: "Source environment to export from (for import operations)"
        required: false
        type: string
  workflow_call:
    inputs:
      environment_name:
        description: "Specify which environment to use"
        required: true
        type: string
      operation_type:
        description: "Specify operation type (export/import)"
        required: true
        type: string
      planning_instance_id:
        description: "Planning Instance ID (required for import)"
        required: false
        type: string
      source_environment:
        description: "Source environment to export from (for import operations)"
        required: false
        type: string

defaults:
  run:
    shell: pwsh

jobs:
  Allocation_Export_Import:
    runs-on: ubuntu-latest
    # Using the environment name as provided, workflow will handle case insensitivity
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      
      # Instead of using actual credentials, we'll create mock files and data
      - name: Create Mock Realm Repository
        run: |
          # Create directory structure for the mock realm repository
          New-Item -ItemType Directory -Path "realms/${{ inputs.environment_name }}/realm_info" -Force
          New-Item -ItemType Directory -Path "realms/${{ inputs.environment_name }}/allocation_export" -Force
          
          # Create a mock realm_info.json file
          $realmInfo = @{
            api_url = "https://mock-api-${{ inputs.environment_name }}.example.com"
          } | ConvertTo-Json
          Set-Content -Path "realms/${{ inputs.environment_name }}/realm_info/realm_info.json" -Value $realmInfo
          
          # Create a mock credential file
          $mockCredential = @{
            client_id = "mock-client-id"
            client_secret = "mock-client-secret"
          } | ConvertTo-Json
          Set-Content -Path "realm_credential.json" -Value $mockCredential
          
          # If source environment is specified, create its directory structure too
          if (-not [string]::IsNullOrEmpty('${{ inputs.source_environment }}')) {
            New-Item -ItemType Directory -Path "realms/${{ inputs.source_environment }}/allocation_export" -Force
            
            # Create a mock export file for the source environment
            Compress-Archive -Path "realms/${{ inputs.environment_name }}/realm_info" -DestinationPath "realms/${{ inputs.source_environment }}/allocation_export/allocation_data.zip" -Force
          }
          
          Write-Host "Mock repository and files created successfully"
      
      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "temurin"
          java-version: "17"
      
      - name: Export Allocation Data (Mock)
        if: ${{ inputs.operation_type == 'export' }}
        run: |
          # Get mock realm info
          $realmInfo = Get-Content realms/${{ inputs.environment_name }}/realm_info/realm_info.json | ConvertFrom-Json
          $baseUrl = $realmInfo.api_url
          
          Write-Host "Mock API URL: $baseUrl"
          Write-Host "Would call $baseUrl/calloc/api/v1/allocation/export in actual workflow"
          
          # Create a mock export file
          $tempFile = "allocation_data_${{ inputs.environment_name }}.zip"
          Compress-Archive -Path "realms/${{ inputs.environment_name }}/realm_info" -DestinationPath $tempFile -Force
          
          # Move the file to the export directory
          $exportDir = "realms/${{ inputs.environment_name }}/allocation_export"
          Move-Item -Path $tempFile -Destination "$exportDir/allocation_data.zip" -Force
          
          Write-Host "Mock allocation data successfully exported to $exportDir/allocation_data.zip"
      
      - name: Import Allocation Data (Mock)
        if: ${{ inputs.operation_type == 'import' }}
        run: |
          # Validate planning instance ID is provided
          if ([string]::IsNullOrEmpty('${{ inputs.planning_instance_id }}')) {
            Write-Error "Planning Instance ID is required for import operation"
            exit 1
          }
          
          # Validate source environment is provided
          if ([string]::IsNullOrEmpty('${{ inputs.source_environment }}')) {
            Write-Error "Source environment is required for import operation"
            exit 1
          }
          
          # Get mock realm info
          $realmInfo = Get-Content realms/${{ inputs.environment_name }}/realm_info/realm_info.json | ConvertFrom-Json
          $baseUrl = $realmInfo.api_url
          
          # Check if export file exists in source environment
          $exportPath = "realms/${{ inputs.source_environment }}/allocation_export/allocation_data.zip"
          if (!(Test-Path $exportPath)) {
            Write-Error "Export file not found at $exportPath. Please run an export first."
            exit 1
          }
          
          Write-Host "Mock API URL: $baseUrl"
          Write-Host "Would call $baseUrl/calloc/api/v1/allocation/import?planningInstanceId=${{ inputs.planning_instance_id }} in actual workflow"
          Write-Host "Would upload file from $exportPath in actual workflow"
          Write-Host "Mock allocation data successfully imported"
      
      - name: Commit and Push Changes (Mock for Export)
        if: ${{ inputs.operation_type == 'export' }}
        run: |
          Write-Host "In actual workflow, would commit and push:"
          Write-Host "- File: ${{ inputs.environment_name }}/allocation_export/allocation_data.zip"
          Write-Host "- Commit message: 'Export allocation data for ${{ inputs.environment_name }}'"
          Write-Host "Mock changes considered pushed to repository"

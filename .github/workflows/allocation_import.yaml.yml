name: Deploy Allocation Data
run-name: Deploy Allocation Data for ${{ inputs.target_realm }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - dev
          - interop
          - psr
          - demo
        default: dev
      source_realm:
        description: "Source realm for reference (metadata only)"
        required: true
        type: string
      target_realm:
        description: "Target realm to import data to"
        required: true
        type: string
      planningInstanceId:
        description: "Planning instance ID"
        required: true
        type: string
  workflow_call:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: string
      source_realm:
        description: "Source realm for reference (metadata only)"
        required: true
        type: string
      target_realm:
        description: "Target realm to import data to"
        required: true
        type: string
      planningInstanceId:
        description: "Planning instance ID"
        required: true
        type: string

defaults:
  run:
    shell: pwsh
jobs:
  Deploy_Allocation_Resources:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Echo Input Parameters
        id: echo_input
        run: |
          Write-Output "Environment: [${{ inputs.environment }}]"
          Write-Output "Source Realm: [${{ inputs.source_realm }}]"
          Write-Output "Target Realm: [${{ inputs.target_realm }}]"
          Write-Output "Planning Instance ID: [${{ inputs.planningInstanceId }}]"

      - name: Check out repository code
        uses: actions/checkout@v4.1.1

      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Check out Realm Repository
        uses: actions/checkout@v4.1.1
        with:
          repository: 'BY-Product-Development/plan-calloc-realms'
          token: ${{ secrets.AUTOMATION_PAT_TOKEN }}
          path: 'realms-repo'

      - name: Setup Realm Directory
        run: |
          $realmPath = "realms-repo/realms/${{ inputs.target_realm }}"
          if (!(Test-Path $realmPath)) {
            New-Item -Path $realmPath -ItemType Directory -Force
            Write-Output "Created target realm directory: $realmPath"
          }

      - name: Download Allocation Export File
        uses: actions/download-artifact@v4
        with:
          name: allocation-export-${{ inputs.source_realm }}
          path: .
        continue-on-error: true

      - name: Check for Allocation Export File
        id: check_export_file
        run: |
          $exportFound = $false
          
          if (Test-Path "exported-tables.zip") {
            Copy-Item "exported-tables.zip" -Destination "allocation-import.zip" -Force
            Write-Output "Using existing allocation export file from workflow artifact for import"
            $exportFound = $true
          } else {
            Write-Output "No exported tables artifact found, checking realm repository..."
            
            # Check if the file exists in the realm repository
            $sourcePath = "realms-repo/realms/${{ inputs.source_realm }}/allocation_export"
            if (Test-Path $sourcePath) {
              # Check if there are any files in the directory
              $files = Get-ChildItem -Path $sourcePath -File -Recurse
              
              if ($files.Count -gt 0) {
                # Create a temp directory for zipping
                New-Item -Path "temp-export" -ItemType Directory -Force
                
                # Copy files to temp directory
                Copy-Item -Path "$sourcePath/*" -Destination "temp-export/" -Recurse
                
                # Create zip file
                Compress-Archive -Path "temp-export/*" -DestinationPath "allocation-import.zip" -Force
                
                # Clean up temp directory
                Remove-Item -Path "temp-export" -Recurse -Force
                
                Write-Output "Created allocation import package from repository"
                $exportFound = $true
              } else {
                Write-Output "Export directory exists but contains no files for realm ${{ inputs.source_realm }}"
              }
            } else {
              Write-Output "No allocation export directory found for realm ${{ inputs.source_realm }}"
            }
          }
          
          if (!$exportFound) {
            Write-Output "::warning::No allocation export data found for source realm ${{ inputs.source_realm }}. Please run the export workflow for this realm first."
            echo "export_found=false" >> $env:GITHUB_OUTPUT
            exit 1
          } else {
            echo "export_found=true" >> $env:GITHUB_OUTPUT
          }

      - name: Import Allocation Data
        run: |
          # Get service access token (implement your auth method here)
          $token = "YOUR_ACCESS_TOKEN"  # Replace with actual token acquisition
          
          # Call the import API
          $importCommand = "curl -X POST -H 'Authorization: Bearer $token' --form 'file=@allocation-import.zip' --form 'planningInstanceId=${{ inputs.planningInstanceId }}'"
          
          $importCommand += " '${{ secrets.SERVICE_BASE_URL }}/api/v1/allocation/import-db-records'"
          
          Write-Output "Executing import command: $importCommand"
          $importResult = Invoke-Expression $importCommand
          
          # Parse and check results
          Write-Output "Import result: $importResult"
          
          # Convert the JSON result to a PowerShell object
          $importResultObj = $importResult | ConvertFrom-Json
          
          if ($importResultObj.status -ne "SUCCESS") {
            Write-Error "Import failed: $($importResultObj.message)"
            exit 1
          }
          
          Write-Output "Allocation data successfully imported to realm ${{ inputs.target_realm }}"
        
      - name: Verify Import Results
        run: |
          Write-Output "Allocation data has been deployed to realm ${{ inputs.target_realm }}"
          Write-Output "Use the allocation service API to verify the data was imported correctly"

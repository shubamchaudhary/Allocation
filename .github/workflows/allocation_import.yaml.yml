name: Deploy Allocation Data
run-name: Deploy Allocation Data for ${{ inputs.realm_name }}
on:
  workflow_dispatch:
    inputs:
      environment_name:
        description: "Specify which environment to use"
        required: true
        type: choice
        options:
          - dev
          - interop
          - psr
          - demo
        default: dev
      realm_name:
        description: "Target realm to deploy allocation data to"
        required: true
        type: string
      planning_instance_id:
        description: "Optional planning instance ID for ondemand data sources"
        required: false
        type: string
  workflow_call:
    inputs:
      environment_name:
        description: "Specify which environment to use"
        required: true
        type: string
      realm_name:
        description: "Target realm to deploy allocation data to"
        required: true
        type: string
      planning_instance_id:
        description: "Optional planning instance ID for ondemand data sources"
        required: false
        type: string

defaults:
  run:
    shell: pwsh
jobs:
  Deploy_Allocation_Resources:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment_name }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.1

      - name: Setup Java JDK
        uses: actions/setup-java@v3.13.0
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Check out Realm Repository
        uses: actions/checkout@v4.1.1
        with:
          repository: 'BY-Product-Development/plan-calloc-realms'
          token: ${{ secrets.AUTOMATION_PAT_TOKEN }}
          path: 'realms-repo'

      - name: Setup Realm Directory
        run: |
          $realmPath = "realms-repo/realms/${{ inputs.realm_name }}"
          if (!(Test-Path $realmPath)) {
            New-Item -Path $realmPath -ItemType Directory -Force
            Write-Output "Created realm directory: $realmPath"
          }
          
          if (!(Test-Path "$realmPath/realm_info")) {
            New-Item -Path "$realmPath/realm_info" -ItemType Directory -Force
            Write-Output "Created realm_info directory"
          }

      - name: Setup Realm Info
        run: |
          $realmInfoPath = "realms-repo/realms/${{ inputs.realm_name }}/realm_info/realm_info.json"
          
          if (!(Test-Path $realmInfoPath)) {
            Write-Error "Realm info file not found at $realmInfoPath"
            exit 1
          }
          
          $realmInfo = Get-Content $realmInfoPath | ConvertFrom-Json
          Write-Output "Realm: $($realmInfo.realm_name), ID: $($realmInfo.realm_id)"

      - name: Download Allocation Export File
        uses: actions/download-artifact@v4
        with:
          name: allocation-export
          path: .
        continue-on-error: true

      - name: Check for Allocation Export File
        run: |
          if (!(Test-Path "exported-tables.zip")) {
            Write-Output "No exported tables artifact found, creating a new export file"
            
            # Here you would implement logic to create a new export file if needed
            # This is just a placeholder - replace with your actual implementation
            New-Item -Path "allocation-import.zip" -ItemType File -Force
          } else {
            Copy-Item "exported-tables.zip" -Destination "allocation-import.zip" -Force
            Write-Output "Using existing allocation export file for import"
          }

      - name: Import Allocation Data
        run: |
          # Get realm credentials
          $realmInfoPath = "realms-repo/realms/${{ inputs.realm_name }}/realm_info/realm_info.json"
          $realmInfo = Get-Content $realmInfoPath | ConvertFrom-Json
          
          # Prepare optional planning instance ID parameter
          $planningInstanceParam = ""
          if ("${{ inputs.planning_instance_id }}" -ne "") {
            $planningInstanceParam = "--form 'planningInstanceId=${{ inputs.planning_instance_id }}'"
          }
          
          # Get service access token (implement your auth method here)
          $token = "YOUR_ACCESS_TOKEN"  # Replace with actual token acquisition
          
          # Call the import API
          $importCommand = "curl -X POST -H 'Authorization: Bearer $token' --form 'file=@allocation-import.zip'"
          
          if ("${{ inputs.planning_instance_id }}" -ne "") {
            $importCommand += " --form 'planningInstanceId=${{ inputs.planning_instance_id }}'"
          }
          
          $importCommand += " '${{ secrets.SERVICE_BASE_URL }}/api/v1/allocation/import-db-records'"
          
          Write-Output "Executing import command: $importCommand"
          $importResult = Invoke-Expression $importCommand
          
          # Parse and check results
          Write-Output "Import result: $importResult"
          
          # Convert the JSON result to a PowerShell object
          $importResultObj = $importResult | ConvertFrom-Json
          
          if ($importResultObj.status -ne "SUCCESS") {
            Write-Error "Import failed: $($importResultObj.message)"
            exit 1
          }
          
          Write-Output "Allocation data successfully imported to realm ${{ inputs.realm_name }}"
        
      - name: Verify Import Results
        run: |
          Write-Output "Allocation data has been deployed to realm ${{ inputs.realm_name }}"
          Write-Output "Use the allocation service API to verify the data was imported correctly"

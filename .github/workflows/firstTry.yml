name: Allocation Data Transfer
run-name: Transfer Allocation Data from ${{ inputs.source_realm_name }} to ${{ inputs.target_realm_name }}
on:
  workflow_dispatch:
    inputs:
      source_realm_name:
        type: string
        description: Name of the source LIAM Realm
        required: true
      source_realm_id:
        type: string
        description: ID of the source LIAM Realm
        required: true
      target_realm_name:
        type: string
        description: Name of the target LIAM Realm
        required: true
      target_realm_id:
        type: string
        description: ID of the target LIAM Realm
        required: true
      geography:
        type: string
        description: Environment Deployment Zone(eg. us, eu, apac)
        required: true
      size:
        type: string
        description: Environment Size(eg. Dev)
        required: true
      jpowerId:
        required: true
        type: string
        description: JPowerID
      customerId:
        required: true
        type: string
        description: Realm Customer ID
      envType:
        required: true
        description: Environment Type (Demo⇒pldena,PSR⇒pltpsr,Pilot⇒plpprvna,Non-Prod⇒plpstgna,Prod⇒plp##,Dev⇒pltna)
        type: choice
        default: Dev
        options:
          - Demo
          - PSR
          - Pilot
          - Non-Prod
          - Prod
          - Dev
      keyVaultURL:
        required: true
        type: string
        description: Key Vault URL to get Client Credential
        default: "https://o67wh6yaleseujavasbb39k7.vault.azure.net"
      source_planning_instance_id:
        required: false
        type: string
        description: Planning Instance ID for source realm
        default: ""
      target_planning_instance_id:
        required: false
        type: string
        description: Planning Instance ID for target realm
        default: ""

defaults:
  run:
    shell: pwsh

jobs:
  get_by_env:
    runs-on: ubuntu-latest
    outputs:
      byenv: ${{ steps.get_by_env.outputs.byenv }}
    steps:
      - name: Get BY Env
        id: get_by_env
        uses: BY-Product-Development/plan-abp-automation/.github/actions/get_by_env@gha-latest
        with:
          geography: ${{ inputs.geography }}
          envType: ${{ inputs.envType }}
      - name: Echo Output
        id: echo_output
        run: |
          Write-Output ${{ steps.get_by_env.outputs.byenv }}

  transfer_allocation_data:
    runs-on: ubuntu-latest
    needs: get_by_env
    environment: ${{ needs.get_by_env.outputs.byenv }}
    steps:
      - name: Echo Input
        id: echo_input
        run: |
          Write-Output "Source Realm Name: [${{ inputs.source_realm_name }}]"
          Write-Output "Source Realm ID: [${{ inputs.source_realm_id }}]"
          Write-Output "Target Realm Name: [${{ inputs.target_realm_name }}]"
          Write-Output "Target Realm ID: [${{ inputs.target_realm_id }}]"
          Write-Output "Geography: [${{ inputs.geography }}]"
          Write-Output "Environment Type: [${{ inputs.envType }}]"
          Write-Output "Size: [${{ inputs.size }}]"
          Write-Output "JPower ID: [${{ inputs.jpowerId }}]"
          Write-Output "Customer ID: [${{ inputs.customerId }}]"
          Write-Output "Key Vault URL: [${{ inputs.keyVaultURL }}]"
          Write-Output "Source Planning Instance ID: [${{ inputs.source_planning_instance_id }}]"
          Write-Output "Target Planning Instance ID: [${{ inputs.target_planning_instance_id }}]"

      - name: Check out repository code
        uses: actions/checkout@v4.1.1

      - name: Setting up BY Script
        uses: BY-Product-Development/plan-abp-automation/.github/actions/setup_by_script@gha-latest

      - name: Check out Realm Repository
        uses: BY-Product-Development/plan-abp-automation/.github/actions/checkout_realm_repository@gha-latest
        with:
          automation_token: ${{ secrets.AUTOMATION_PAT_TOKEN }}

      # Create folder for exported data
      - name: Create Export Directory
        run: |
          New-Item -Force -Path ${{ github.workspace }} -Name 'allocation_export' -Type Directory

      # Set up source realm
      - name: Setup Source Realm
        id: setup_source_realm
        uses: ./.github/actions/setup-allocation-transfer
        with:
          realm_name: ${{ inputs.source_realm_name }}
          realm_id: ${{ inputs.source_realm_id }}
          customer_id: ${{ inputs.customerId }}
          jpower_id: ${{ inputs.jpowerId }}
          env_type: ${{ inputs.envType }}
          geography: ${{ inputs.geography }}
          size: ${{ inputs.size }}
          by_env: ${{ needs.get_by_env.outputs.byenv }}
          key_vault_url: ${{ inputs.keyVaultURL }}
          stratosphere_client_id: ${{ secrets.SX_CBP_DEVOPS_CLIENT_ID }}
          stratosphere_client_secret: ${{ secrets.SX_CBP_DEVOPS_CLIENT_SECRET }}
          alt_key_vault_name: ${{ vars.SX_CBP_DEVOPS_KV_NAME }}
          stratosphere_api_url: ${{ vars.STRATOSPHERE_API_URL }}
          stratosphere_auth_url: ${{ vars.STRATOSPHERE_AUTH_URL }}
          workspace_path: ${{ github.workspace }}

      - name: Create Credential Files
        uses: BY-Product-Development/plan-abp-automation/.github/actions/setup_credential_files@gha-latest
        with:
          realm_credential: ${{ secrets.LIAM_CREDENTIAL }}
          snowflake_environment: ${{ secrets.SF_CONTEXT }}
          snowflake_private_key: ${{ secrets.SF_RSA_KEY }}

      # Export allocation data from source realm
      - name: Export Allocation Data
        id: export_allocation_data
        uses: ./.github/actions/allocation-export
        with:
          realm_name: ${{ inputs.source_realm_name }}
          realm_credential_path: ${{ steps.setup_source_realm.outputs.realm_credential_path }}
          realm_info_path: ${{ steps.setup_source_realm.outputs.realm_info_path }}
          output_path: ${{ github.workspace }}/allocation_export/exported-data.zip

      # Store source realm credential for later use
      - name: Backup Source Realm Credential
        id: backup_source_credential
        run: |
          if (Test-Path "${{ steps.setup_source_realm.outputs.realm_credential_path }}") {
            Copy-Item -Path "${{ steps.setup_source_realm.outputs.realm_credential_path }}" -Destination "${{ github.workspace }}/source_realm_credential.json"
          }

      # Set up target realm
      - name: Setup Target Realm
        id: setup_target_realm
        uses: ./.github/actions/setup-allocation-transfer
        with:
          realm_name: ${{ inputs.target_realm_name }}
          realm_id: ${{ inputs.target_realm_id }}
          customer_id: ${{ inputs.customerId }}
          jpower_id: ${{ inputs.jpowerId }}
          env_type: ${{ inputs.envType }}
          geography: ${{ inputs.geography }}
          size: ${{ inputs.size }}
          by_env: ${{ needs.get_by_env.outputs.byenv }}
          key_vault_url: ${{ inputs.keyVaultURL }}
          stratosphere_client_id: ${{ secrets.SX_CBP_DEVOPS_CLIENT_ID }}
          stratosphere_client_secret: ${{ secrets.SX_CBP_DEVOPS_CLIENT_SECRET }}
          alt_key_vault_name: ${{ vars.SX_CBP_DEVOPS_KV_NAME }}
          stratosphere_api_url: ${{ vars.STRATOSPHERE_API_URL }}
          stratosphere_auth_url: ${{ vars.STRATOSPHERE_AUTH_URL }}
          workspace_path: ${{ github.workspace }}

      # Import allocation data to target realm
      - name: Import Allocation Data
        id: import_allocation_data
        uses: ./.github/actions/allocation-import
        with:
          realm_name: ${{ inputs.target_realm_name }}
          realm_credential_path: ${{ steps.setup_target_realm.outputs.realm_credential_path }}
          realm_info_path: ${{ steps.setup_target_realm.outputs.realm_info_path }}
          input_file_path: ${{ github.workspace }}/allocation_export/exported-data.zip

      # Upload exported data as artifact
      - name: Upload Exported Data
        uses: actions/upload-artifact@v4.6.0
        with:
          name: allocation-exported-data
          path: ${{ github.workspace }}/allocation_export
          retention-days: 7

name: Transfer Allocation Database Records
run-name: Transfer from ${{ inputs.source_realm_name }} to ${{ inputs.target_realm_name }}
on:
  workflow_dispatch:
    inputs:
      source_realm_id:
        description: "Source Realm ID"
        required: true
        type: string
      source_realm_name:
        description: "Source Realm Name"
        required: true
        type: string
      source_geography:
        description: "Source Geography (e.g., us, eu, apac)"
        required: true
        type: string
      source_env_type:
        description: "Source Environment Type"
        required: true
        type: choice
        options:
          - Demo
          - PSR
          - Pilot
          - Non-Prod
          - Prod
          - Dev
          - Test
      target_realm_id:
        description: "Target Realm ID"
        required: true
        type: string
      target_realm_name:
        description: "Target Realm Name"
        required: true
        type: string
      target_geography:
        description: "Target Geography (e.g., us, eu, apac)"
        required: true
        type: string
      target_env_type:
        description: "Target Environment Type"
        required: true
        type: choice
        options:
          - Demo
          - PSR
          - Pilot
          - Non-Prod
          - Prod
          - Dev
          - Test
      key_vault_url:
        description: "Key Vault URL to get Client Credential"
        required: true
        type: string
        default: "https://o67wh6yaleseujavasbb39k7.vault.azure.net"

defaults:
  run:
    shell: pwsh

jobs:
  get_source_by_env:
    runs-on: ubuntu-latest
    outputs:
      byenv: ${{ steps.get_source_by_env.outputs.byenv }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.1
        
      - name: Get BY Env for Source
        id: get_source_by_env
        uses: BY-Product-Development/plan-abp-automation/.github/actions/get_by_env@gha-latest
        with:
          geography: ${{ inputs.source_geography }}
          envType: ${{ inputs.source_env_type }}
      
      - name: Echo Source Output
        id: echo_source_output
        run: |
          Write-Output "Source BY Environment: ${{ steps.get_source_by_env.outputs.byenv }}"

  get_target_by_env:
    runs-on: ubuntu-latest
    outputs:
      byenv: ${{ steps.get_target_by_env.outputs.byenv }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.1
        
      - name: Get BY Env for Target
        id: get_target_by_env
        uses: BY-Product-Development/plan-abp-automation/.github/actions/get_by_env@gha-latest
        with:
          geography: ${{ inputs.target_geography }}
          envType: ${{ inputs.target_env_type }}
      
      - name: Echo Target Output
        id: echo_target_output
        run: |
          Write-Output "Target BY Environment: ${{ steps.get_target_by_env.outputs.byenv }}"

  Export_Source_Records:
    runs-on: ubuntu-latest
    needs: [get_source_by_env]
    environment: ${{ needs.get_source_by_env.outputs.byenv }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.1

      - name: Setting up BY Script
        uses: BY-Product-Development/plan-abp-automation/.github/actions/setup_by_script@gha-latest

      - name: Create Source Realm Credential
        id: create_source_credential
        uses: BY-Product-Development/plan-abp-automation/.github/actions/apply_aep_parameter@gha-latest
        with:
          stratosphere_client_id: ${{ secrets.SX_CBP_DEVOPS_CLIENT_ID }}
          stratosphere_client_secret: ${{ secrets.SX_CBP_DEVOPS_CLIENT_SECRET }}
          realm_name: ${{ inputs.source_realm_name }}
          realm_id: ${{ inputs.source_realm_id }}
          customer_id: ${{ secrets.CUSTOMER_ID }}
          jpower_id: ${{ secrets.JPOWER_ID }}
          env_type: ${{ inputs.source_env_type }}
          geography: ${{ inputs.source_geography }}
          size: "Standard"
          costCenter: 474000
          by_env: ${{ needs.get_source_by_env.outputs.byenv }}
          key_vault_url: ${{ inputs.key_vault_url }}
          alt_key_vault_name: ${{ vars.SX_CBP_DEVOPS_KV_NAME }}
          stratosphere_api_url: ${{ vars.STRATOSPHERE_API_URL }}
          stratosphere_auth_url: ${{ vars.STRATOSPHERE_AUTH_URL }}

      - name: Create Credential
        uses: BY-Product-Development/plan-abp-automation/.github/actions/setup_credential_files@gha-latest
        with:
          realm_credential: ${{ secrets.LIAM_CREDENTIAL }}
          snowflake_environment: ${{ secrets.SF_CONTEXT }}
          snowflake_private_key: ${{ secrets.SF_RSA_KEY }}

      - name: Export Allocation DB Records
        id: export_records
        run: |
          Write-Output "Starting export from realm ${{ inputs.source_realm_name }} (${{ inputs.source_realm_id }})"
          
          # Create temporary directory for the exported file
          $exportDir = Join-Path -Path ${{ github.workspace }} -ChildPath "exported-records"
          New-Item -ItemType Directory -Path $exportDir -Force | Out-Null
          $exportFilePath = Join-Path -Path $exportDir -ChildPath "exported-tables.zip"
          
          # Export using almv2_export tool
          try {
            # For now, using direct REST API call since we don't have the exact almv2 tool for allocation
            # This would be replaced with the proper almv2 tool command once available
            
            # First try to get the credential file and extract necessary info
            $realmCredFile = "${{ inputs.source_realm_name }}.postman_environment.json"
            if (Test-Path $realmCredFile) {
              $realmCred = Get-Content -Raw $realmCredFile | ConvertFrom-Json
              $baseUrl = ($realmCred.values | Where-Object { $_.key -eq "baseUrl" }).value
              $authToken = ($realmCred.values | Where-Object { $_.key -eq "authToken" }).value
              
              Write-Output "Using baseUrl: $baseUrl"
              
              # Make the API call to export
              $headers = @{
                "Authorization" = "Bearer $authToken"
              }
              
              Invoke-RestMethod -Uri "$baseUrl/api/v1/allocation/export-db-records" -Headers $headers -Method GET -OutFile $exportFilePath
              
              if (Test-Path $exportFilePath) {
                $fileSize = (Get-Item $exportFilePath).Length
                Write-Output "Export file created successfully, size: $fileSize bytes"
              } else {
                throw "Export file was not created"
              }
            } else {
              throw "Realm credential file not found: $realmCredFile"
            }
          } catch {
            Write-Error "Export failed: $_"
            exit 1
          }
          
          # Store the file path for the next job
          echo "::set-output name=export_dir::$exportDir"
          echo "::set-output name=export_file::$exportFilePath"

      - name: Upload Exported Records
        uses: actions/upload-artifact@v4.6.0
        with:
          name: allocation-exported-records
          path: ${{ steps.export_records.outputs.export_file }}
          retention-days: 1

  Import_Target_Records:
    runs-on: ubuntu-latest
    needs: [get_target_by_env, Export_Source_Records]
    environment: ${{ needs.get_target_by_env.outputs.byenv }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4.1.1

      - name: Setting up BY Script
        uses: BY-Product-Development/plan-abp-automation/.github/actions/setup_by_script@gha-latest

      - name: Create Target Realm Credential
        id: create_target_credential
        uses: BY-Product-Development/plan-abp-automation/.github/actions/apply_aep_parameter@gha-latest
        with:
          stratosphere_client_id: ${{ secrets.SX_CBP_DEVOPS_CLIENT_ID }}
          stratosphere_client_secret: ${{ secrets.SX_CBP_DEVOPS_CLIENT_SECRET }}
          realm_name: ${{ inputs.target_realm_name }}
          realm_id: ${{ inputs.target_realm_id }}
          customer_id: ${{ secrets.CUSTOMER_ID }}
          jpower_id: ${{ secrets.JPOWER_ID }}
          env_type: ${{ inputs.target_env_type }}
          geography: ${{ inputs.target_geography }}
          size: "Standard"
          costCenter: 474000
          by_env: ${{ needs.get_target_by_env.outputs.byenv }}
          key_vault_url: ${{ inputs.key_vault_url }}
          alt_key_vault_name: ${{ vars.SX_CBP_DEVOPS_KV_NAME }}
          stratosphere_api_url: ${{ vars.STRATOSPHERE_API_URL }}
          stratosphere_auth_url: ${{ vars.STRATOSPHERE_AUTH_URL }}

      - name: Create Credential
        uses: BY-Product-Development/plan-abp-automation/.github/actions/setup_credential_files@gha-latest
        with:
          realm_credential: ${{ secrets.LIAM_CREDENTIAL }}
          snowflake_environment: ${{ secrets.SF_CONTEXT }}
          snowflake_private_key: ${{ secrets.SF_RSA_KEY }}

      - name: Download Exported Records
        uses: actions/download-artifact@v3
        with:
          name: allocation-exported-records
          path: ${{ github.workspace }}/imported-records

      - name: Import Allocation DB Records
        run: |
          Write-Output "Starting import to realm ${{ inputs.target_realm_name }} (${{ inputs.target_realm_id }})"
          
          # Get the exported file
          $importFile = Get-ChildItem -Path "${{ github.workspace }}/imported-records" -Filter "exported-tables.zip" | Select-Object -First 1 -ExpandProperty FullName
          
          if (-not $importFile) {
            Write-Error "Exported file not found"
            exit 1
          }
          
          Write-Output "Found export file: $importFile"
          
          # Import using the file
          try {
            # First try to get the credential file and extract necessary info
            $realmCredFile = "${{ inputs.target_realm_name }}.postman_environment.json"
            if (Test-Path $realmCredFile) {
              $realmCred = Get-Content -Raw $realmCredFile | ConvertFrom-Json
              $baseUrl = ($realmCred.values | Where-Object { $_.key -eq "baseUrl" }).value
              $authToken = ($realmCred.values | Where-Object { $_.key -eq "authToken" }).value
              
              Write-Output "Using baseUrl: $baseUrl"
              
              # Prepare multipart form data for file upload
              $fileBytes = [System.IO.File]::ReadAllBytes($importFile)
              $boundary = [System.Guid]::NewGuid().ToString()
              
              $headers = @{
                "Authorization" = "Bearer $authToken"
                "Content-Type" = "multipart/form-data; boundary=$boundary"
              }
              
              $LF = "`r`n"
              $bodyLines = @(
                "--$boundary",
                "Content-Disposition: form-data; name=`"file`"; filename=`"exported-tables.zip`"",
                "Content-Type: application/zip$LF"
              )
              
              $body = [System.Text.Encoding]::UTF8.GetBytes(($bodyLines -join $LF))
              $body += $fileBytes
              $body += [System.Text.Encoding]::UTF8.GetBytes("$LF--$boundary--$LF")
              
              # Make the API call to import
              $response = Invoke-RestMethod -Uri "$baseUrl/api/v1/allocation/import-db-records" -Method POST -Headers $headers -Body $body
              Write-Output "Import completed successfully"
              Write-Output "Response: $($response | ConvertTo-Json -Depth 4)"
            } else {
              throw "Realm credential file not found: $realmCredFile"
            }
          } catch {
            Write-Error "Import failed: $_"
            exit 1
          }

      - name: Cleanup
        run: |
          Remove-Item -Path "${{ github.workspace }}/imported-records" -Recurse -Force -ErrorAction SilentlyContinue
          Write-Output "Temporary files removed"
